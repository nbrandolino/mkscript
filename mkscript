#!/usr/bin/env python3

import argparse
import os
import platform
import sys

# software version and name
__software__ = "mkscript"
__version__ = "1.1"

# main function
def main():
    checkOS()
    parser = getParser()
    args = parser.parse_args()

    # check if no arguments were provided
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    # parse arguments
    if args.version:
        version()
    elif args.bash_output_file:
        create_script(args.bash_output_file, "#!/usr/bin/env bash")
    elif args.lua_output_file:
        create_script(args.lua_output_file, "#!/usr/bin/env lua")
    elif args.perl_output_file:
        create_script(args.perl_output_file, "#!/usr/bin/env perl")
    elif args.python_output_file:
        create_script(args.python_output_file, "#!/usr/bin/env python3")
    elif args.ruby_output_file:
        create_script(args.ruby_output_file, "#!/usr/bin/env ruby")
    else:
        parser.print_help()

# make sure script is being run on either linux or macos
def checkOS():
    if platform.system() in ['Linux', 'Darwin']:
        pass
    else:
        print("Script can only be run on Linux or macOS.")
        sys.exit(1)

# parse arguments
def getParser():
    parser = argparse.ArgumentParser(
        description="Python script to create a script with the shebang and make it executable."
    )
    groupMain = parser.add_mutually_exclusive_group(required=False)
    groupOutput = parser.add_mutually_exclusive_group(required=False)
    groupMain.add_argument(
        "-v",
        "--version",
        action="store_true",
        help="display version information",
    )
    groupOutput.add_argument(
        "-b",
        "--bash",
        dest="bash_output_file",
        metavar="FILENAME",
        help="specify output file location"
    )
    groupOutput.add_argument(
        "-l",
        "--lua",
        dest="lua_output_file",
        metavar="FILENAME",
        help="specify output file location"
    )
    groupOutput.add_argument(
        "-pe",
        "--perl",
        dest="perl_output_file",
        metavar="FILENAME",
        help="specify output file location"
    )
    groupOutput.add_argument(
        "-py",
        "--python",
        dest="python_output_file",
        metavar="FILENAME",
        help="specify output file location"
    )
    groupOutput.add_argument(
        "-r",
        "--ruby",
        dest="ruby_output_file",
        metavar="FILENAME",
        help="specify output file location"
    )
    return parser

# print version information
def version():
    print(f"Version: {__version__}")
    print("Licensed under the terms of the GNU General Public License.")

# create script with shebang and make it executable
def create_script(filename, shebang):
    try:
        with open(filename, 'w') as f:
            f.write(shebang + "\n")
        os.chmod(filename, 0o755)
        print(f"Script created: {filename}")
    except OSError as e:
        print(f"Error creating file {filename}: {e}")
        sys.exit(1)

# call main
if __name__ == "__main__":
    main()
