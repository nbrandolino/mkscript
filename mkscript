#!/usr/bin/env python3

import argparse
import os
import platform
import sys

# software version and name
__software__ = "mkscript"
__version__ = "1.0"

# main function
def main():
    checkOS()
    parser = getParser()
    args = parser.parse_args()

    # check if no arguments were provided
    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    # parse arguments
    if args.version:
        version()
    elif args.bash_output_file:
        bash(parser, args.bash_output_file)
    elif args.lua_output_file:
        lua(parser, args.lua_output_file)
    elif args.perl_output_file:
        perl(parser, args.perl_output_file)
    elif args.python_output_file:
        python(parser, args.python_output_file)
    elif args.ruby_output_file:
        ruby(parser, args.ruby_output_file)
    else:
        parser.print_help()

# make sure script is being run on either linux or macos
def checkOS():
    if platform.system() in ['Linux', 'Darwin']:
        pass
    else:
        print("Script can only be run on Linux or macOS.")
        sys.exit(1)

# parse arguments
def getParser():
    parser = argparse.ArgumentParser(
        description="Python script to create a script with the shebang and make it executable."
    )
    groupMain = parser.add_mutually_exclusive_group(required=False)
    groupOutput = parser.add_mutually_exclusive_group(required=False)
    groupMain.add_argument(
        "-v",
        "--version",
        action="store_true",
        help="display version information",
    )
    groupOutput.add_argument(
        "-b",
        "--bash",
        dest="bash_output_file",
        metavar="FILENAME",
        help="specify output file location"
    )
    groupOutput.add_argument(
        "-l",
        "--lua",
        dest="lua_output_file",
        metavar="FILENAME",
        help="specify output file location"
    )
    groupOutput.add_argument(
        "-pe",
        "--perl",
        dest="perl_output_file",
        metavar="FILENAME",
        help="specify output file location"
    )
    groupOutput.add_argument(
        "-py",
        "--python",
        dest="python_output_file",
        metavar="FILENAME",
        help="specify output file location"
    )
    groupOutput.add_argument(
        "-r",
        "--ruby",
        dest="ruby_output_file",
        metavar="FILENAME",
        help="specify output file location"
    )
    return parser

# print version information
def version():
    print(f"Version: {__version__}")
    print("Licensed under the terms of the GNU General Public License.")

# bash function
def bash(parser, bash_output_file):
    with open(bash_output_file, 'w') as f:
        f.write("#!/usr/bin/env bash")
    os.chmod(bash_output_file, 0o755)

# lua function
def lua(parser, lua_output_file):
    with open(lua_output_file, 'w') as f:
        f.write("#!/usr/bin/env lua")
    os.chmod(lua_output_file, 0o755)

# perl function
def perl(parser, perl_output_file):
    with open(perl_output_file, 'w') as f:
        f.write("#!/usr/bin/env perl")
    os.chmod(perl_output_file, 0o755)

# python function
def python(parser, python_output_file):
    with open(python_output_file, 'w') as f:
        f.write("#!/usr/bin/env python3")
    os.chmod(python_output_file, 0o755)

# ruby function
def ruby(parser, ruby_output_file):
    with open(ruby_output_file, 'w') as f:
        f.write("#!/usr/bin/env ruby")
    os.chmod(ruby_output_file, 0o755)

# call main
if __name__ == "__main__":
    main()
